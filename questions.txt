名前重要

名前重要

つまり逆ポーランド機能で書きましょう！
（いや、嘘ですけど）

例１

結いひろ本です、デザパタです

Proxyパターンの解説
  * メソッド名が同じで、プロキシ先をただ読んでいるだけ
  * method_missingで書き直し
  * それを継承先に追い出す
  * プロキシで吐き出したいものを吐き出してしまう

Proxyパターンの生産性が大きく変わった
というかProxyパターン自体の使い方すら変える
(最初にProxyパターンが必要なことを見抜く必要がない、リファクタリングの段階でさっくりと簡単に挟み込めるようになった)

デザインパターンも固定された概念ではなく
言語ごとに文化、パターンに違いがある
(IteratorとかRubyの場合実質言語組み込みだしね！）

このままデザインパターンをRubyの機構を利用して描き直し続けるのも面白いのですが
こんかいはもうちょっと先に進みます

例２

mathod_missingnによるアクション生成
  * 必要な機能は一覧、詳細の表示、データの作成と編集
  * マスターデータのテーブルはxxx_masters で統一されている

最終的なマスターテーブルの数23個
生産性 23 : 1
(途中でmigrationでデータが壊れる危険性の排除、デバッグの工数を考えるとそれ以上！！)

何故このようなことが発生したのか
共通の名前と構造を持つことを利用したから

名前共通の概念のお話

関数合成の話

プログラミングとは真理に至るためのプロセス、修行

フォームの書式の変遷
formtasticの説明

フォームの共通構造を見ぬいていくことで実現

プログラミングとは正しい名前をつけつときにはすでに終わっている

共通の構造を見つけてくくり出す
A,B,C,D

A',B',C',D'

どちらも同じコードで動作する!

最初から正しくやる必要はない
(必要な要件と機能を把握していないのにそもそも出来るわけがない)

最初に要件を満たすコードを書く
できるだけ早い段階でテストを作成する
全体像を見渡して、共通の構造を見抜く
テストを通るようにリファクタリングをする
リファクタリングで簡潔になったコードを見なおして、さらに全体を覆っている共通の構造を見抜く
これ以上短くできないところまで来たら、一度コードをも元にもどして、もっと簡潔な方法はなかったのか内省する

これを繰り返していくことで、最終的にこれが最善の方法であると確信するに”至る”

そうある、境地に”至る”のです！！
さらなる高位の真理にいたるための土台がね！！

*プログラミングは一生もの
何処まで登っても先人の足跡が残っている
未踏の大地のまっさらな新雪に、アポロ１１号のクルーのごとく自分たちの足あとを残せることは稀かもしれない
それでも、敷かれたレールを出ていこう！
時には自分の足で歩いて
獣道を整備しよう、道にしよう！
みんなが集まった時には、そこに街を作ろう！
新たなレールを敷こう！！

巨人の方の上に乗ろう！
もっと遠くを見合わたそう！
知の大海に、己の一滴を投じよう！

レッツ真理！！





広告の会社はとりあえずgoogleのadsenceでいいの？

地図の表示もgooglemapでとりあえすOK？

料理のジャンル分けは？
　* 大素材名（魚）　 
  * 少素材名(スズキ）
とかでいいの？

エリアは
 * 省
 * 街（ホーチミン）

くらいの区分け？

