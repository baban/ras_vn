<% content_for :javascripts do %>
  <%= javascript_include_tag "d3.v2" %>
<% end %>
<% content_for :stylesheets do %>
  <%= stylesheet_link_tag :statistics %>
<% end %>

<div id="static_graph"></div>
<table id="static_table" class="data"></table>
<script type="text/javascript" charset="utf-8">
  function renderGraph(graphNode, w, h, nodes, link_list ){
    console.log( nodes );
    nodes = nodes.map(function(data){ return { label: data["label"]+" ("+data["amount"]+")", r: Math.log(data["amount"]) + 2 } });
    link_list = link_list.map(function(data){ data["width"]= (Math.log(data["amount"])*100)/300 + 1; return data });

    var labelAnchors = [];
    var labelAnchorLinks = [];
    var links = [];

    for(var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      labelAnchors.push({ node: node });
      labelAnchors.push({ node: node });
      // ラベルをボールに接着
      labelAnchorLinks.push({
        source : i * 2,
        target : i * 2 + 1,
        weight : 1
      });
    };

    for( var i=0; i < link_list.length; i++ ) {
      links.push(link_list[i]);
    }

    var labelDistance = 0;

    // 描画空間を作成
    var vis = d3.select(graphNode).append("svg:svg").attr("width", w).attr("height", h);

    var force = d3.layout.force().size([w, h]).nodes(nodes).links(links).gravity(1).linkDistance(100).charge(-3000).friction(0.9).linkStrength(function(x) {
      return x.weight * 10
    });

    force.start();

    // ラベル文字を表示
    var force2 = d3.layout.force().nodes(labelAnchors).links(labelAnchorLinks).gravity(0).linkDistance(0).linkStrength(8).charge(-100).size([w, h]);
    force2.start();

    var link = vis.selectAll("line.link").data(links).enter().append("svg:line").attr("class", "link").style("stroke", "#CCC").style("stroke-width", 1);

    var node = vis.selectAll("g.node").data(force.nodes()).enter().append("svg:g").attr("class", "node");
    node.append("svg:circle").style("fill", "#ccc").style("stroke", "#aaa").style("stroke-width", 1);
    node.call(force.drag);

    var anchorLink = vis.selectAll("line.anchorLink").data(labelAnchorLinks);
    var anchorNode = vis.selectAll("g.anchorNode").data(force2.nodes()).enter().append("svg:g").attr("class", "anchorNode");

    anchorNode.append("svg:circle").attr("r", 0).style("fill", "#fff");
    anchorNode.append("svg:text").text(function(d, i) { return i % 2 == 0 ? "" : d.node.label }).style("fill", "#000").style("font-family", "Arial").style("font-size", 7);

    // 描画プログラム
    force.on("tick", function() {
      var updateNode = function() {
        this.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
      }

      var updateLink = function() {
        this.attr("x1", function(d) {
          return d.source.x;
        }).attr("y1", function(d) {
          return d.source.y;
        }).attr("x2", function(d) {
          return d.target.x;
        }).attr("y2", function(d) {
          return d.target.y;
        });
      }

      force2.start();
      node.call(updateNode);
      anchorNode.each(function(d, i) {
        if(i % 2 == 0) {
          d.x = d.node.x;
          d.y = d.node.y;
        } else {
          var b = this.childNodes[1].getBBox();

          var diffX = d.x - d.node.x;
          var diffY = d.y - d.node.y;

          var dist = Math.sqrt(diffX * diffX + diffY * diffY);

          var shiftX = b.width * (diffX - dist) / (dist * 2);
          shiftX = Math.max(-b.width, Math.min(0, shiftX));
          var shiftY = 5;
          this.childNodes[1].setAttribute("transform", "translate(" + shiftX + "," + shiftY + ")");
        }
      });
      anchorNode.call(updateNode);
      link.call(updateLink);
      anchorLink.call(updateLink);
    });

    var gNodes = vis.selectAll("g.node")[0];
    for( var i=0; i < nodes.length; i++ ) {
      var info = nodes[i];
      var circle = d3.select( gNodes[i].childNodes[0] );
      circle.attr( "r", (info.r || 5)  );
    }
    var gLinks = vis.selectAll("line.link")[0];
    for( var i=0; i < link_list.length; i++ ) {
      var info = link_list[i];
      var gLink = d3.select( gLinks[i] );
      gLink.style( "stroke-width", (info.width || 1) );
    }
  }

  function renderTable( tableNode, nodes ){
    $(tableNode).append( "<tr><th>label</th><th>amount</th></tr>" );
    nodes.map(function(data){
      $(tableNode).append( "<tr><td>"+data["label"]+"</td><td>"+data["amount"]+"</td></tr>" );
    });
  }

  d3.json("/statistics/access_source.json", function( data ){
    console.log( data );

    var graphNode = document.getElementById("static_graph");
    var w = 900, h = 400;
    var link_list = data["links"];
    var nodes = data["nodes"];

    renderGraph( graphNode, w, h, nodes, link_list );

    var tableNode = document.getElementById("static_table");
    renderTable( tableNode, data["nodes"] );
  });
</script>

